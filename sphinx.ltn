namespace sphinx {
	var total_errors = [];
	var last_errors = [];
	var test_count = 0;
	var case_count = 0;


	function emit_error(error) private {
		std::insert_back(last_errors, error);
	}



	function push_errors() private {
		inc_test();
		if(last_successful()) {
			std::io::set_fg_color(std::io::color::GREEN);
			std::println(" -> ok");
		}
		else {
			std::io::set_fg_color(std::io::color::RED);
			std::println(" -> FAILED!");
			for(err : last_errors) {
				std::println(err);
			}
		}
		std::io::reset_color();

		total_errors = total_errors + last_errors;
		last_errors = [];
	}



	function last_successful() private {
		return std::empty(last_errors);
	}



	function all_successful() private {
		return std::empty(total_errors);
	}



	function inc_test() private {
		test_count = test_count + 1;
	}


	
	function inc_case() private {
		case_count = case_count + 1;
	}



	function print_results() private {
		if(all_successful()) {
			std::io::set_fg_color(std::io::color::GREEN);
		}
		else {
			std::io::set_fg_color(std::io::color::RED);
		}

		std::println("Results");
		std::println("Tests:       " + std::str(test_count));
		std::println("Total cases: " + std::str(case_count));
		std::println("Errors:      " + std::str(std::size(total_errors)));

		if(all_successful()) {
			std::println("All tests successful :)");
		}
		else {
			std::println(std::str(std::size(total_errors)) + " test cases failed!");
		}
		std::io::reset_color();
	}



	function run_tests() {
		var ns = reflect(namespace sphinx::test);
		for(fx : ns.functions) {
			std::print("Test: " + fx.name);
			fx.fx_ptr();
			push_errors();
		}
		print_results();
	}



	function assert_equal(a, b) private {
		inc_case();
		if(a != b) {
			emit_error("[FAILED] Expected equal values: " + std::str(a) + " != " + std::str(b));
		}
	}


	function assert_equal_strict(a, b) private {
		inc_case();
		if(a != b || std::typeid(a) != std::typeid(b)) {
			emit_error("[FAILED] Expected equal values of equal type: " + std::str(a) + " != " + std::str(b));
		}
	}


	function assert_true(input) private {
		inc_case();
		if(!input) {
			emit_error("[FAILED] Expected true but got false");
		}
	}



	function assert_false(input) private {
		inc_case();
		if(input) {
			emit_error("[FAILED] Expected false but got true");
		}
	}



	function assert_success(fx) private {
		inc_case();
		if(!std::is_successful(fx)) {
			emit_error("[FAILED] Expected success but got exception");
		}
	}



	function assert_except(fx) private {
		inc_case();
		if(std::is_successful(fx)) {
			emit_error("[FAILED] Expected exception but got success");
		}
	}



	function fail() private {
		inc_case();
		emit_error("[FAILED] Call to fail()");
	}



	function pass() private {
		inc_case();
	}
}