namespace sphinx {
	function print_success(output, msg) private {
		std::io::set_fg_color(std::io::color::GREEN);
		std::println(output, msg);
	}



	function print_fail(output, msg) private {
		std::io::set_fg_color(std::io::color::BOLD_RED);
		std::println(output, msg);
	}



	function was_successful(fx, params) private {
		std::invoke(fx, params);
		return true; 
	}
	except(e) {
		return false;
	}



	function on_result_case(instance, fx, test_case) private {
		var result = std::invoke(fx, test_case.input);
		std::io::reset_color();
		if(result == test_case.expected) {
			print_success(instance.output, "ok: "
				+ std::string(test_case.input) 
				+ " -> " 
				+ std::string(test_case.expected)
			);
		}
		else {
			print_fail(instance.output, "[ERROR]: "
				+ std::string(test_case.input) 
				+ " ->" 
				+ " expected " + std::string(test_case.expected)
				+ " got " + std::string(result)
			);
			instance.error_count += 1;
		}
	}



	function on_success_case(instance, fx, test_case) private {
		if(was_successful(fx, test_case.input)) {
			print_success(instance.output, "ok: "
				+ std::string(test_case.input) 
				+ " was successful"
			);
		}
		else {
			print_fail(instance.output, "[ERROR]: "
				+ std::string(test_case.input) 
				+ " failed"
			);
			instance.error_count += 1;
		}
	}



	function on_fail_case(instance, fx, test_case) private {
		if(!was_successful(fx, test_case.input)) {
			print_success(instance.output, "ok: "
				+ std::string(test_case.input) 
				+ " exception was thrown correctly"
			);
		}
		else {
			print_fail(instance.output,"[ERROR]: "
				+ std::string(test_case.input) 
				+ " expected exception"
			);
			instance.error_count += 1;
		}
	}



	function init(output) {
		var instance = std::struct();
		instance.error_count = 0;
		instance.test_count = 0;
		instance.case_count = 0;
		instance.output = output;
		return instance;
	}



	enum case_type {
		RESULT;
		SUCCESS;
		FAIL;
	}



	function assert_result(input, expected) {
		var test_case = std::struct();
		test_case.type = case_type::RESULT;
		test_case.input = input;
		test_case.expected = expected;
		return test_case;
	}



	function assert_success(input) {
		var test_case = std::struct();
		test_case.type = case_type::SUCCESS;
		test_case.input = input;
		return test_case;
	}



	function assert_fail(input) {
		var test_case = std::struct();
		test_case.type = case_type::FAIL;
		test_case.input = input;
		return test_case;
	}



	function run_test(instance, name, fx, cases) {
		std::println(instance.output, "Testing: " + std::string(name));
		instance.test_count += 1;
		for (i : 0 -> std::size(cases)) {
			instance.case_count += 1;
			std::io::reset_color();
			var test_case = cases[i];
			switch(test_case.type) {
				case case_type::RESULT:
					on_result_case(instance, fx, test_case);
				
				case case_type::SUCCESS:
					on_success_case(instance, fx, test_case);

				case case_type::FAIL:
					on_fail_case(instance, fx, test_case);
			}
			std::io::reset_color();
		}
		std::println(instance.output, "");
	}



	function interprete_results(instance) {
		std::println(instance.output,
			"=== Result ===");
		
		std::println(instance.output,
			std::string(instance.test_count) + " test(s)");
		
		std::println(instance.output,
			std::string(instance.case_count) + " case(s) total");
		
		if(instance.error_count) {
			std::println(instance.output, 
				"Tests failed");
			
			std::println(instance.output,
				std::string(instance.error_count) + " ERROR(S)");
		}
		else {
			std::println(instance.output,
				"No errors found. All tests successful :)");
		}
		std::println(instance.output, "");
	}
}