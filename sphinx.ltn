namespace sphinx {
	function was_successful(fx, params) private {
		std::invoke(fx, params);
		return true; 
	}
	except(e) => false



	function on_result_case(instance, fx, test_case) private {
		var result = std::invoke(fx, test_case.input);
		std::io::reset_color();
		if(result == test_case.expected) {
			std::io::set_fg_color(std::io::color::GREEN);
			std::println("ok: "
				+ std::string(test_case.input) 
				+ " -> " 
				+ std::string(test_case.expected));
		}
		else {
			std::io::set_fg_color(std::io::color::BOLD_RED);
			std::println("[ERROR]: "
				+ std::string(test_case.input) 
				+ " ->" 
				+ " expected " + std::string(test_case.expected)
				+ " got " + std::string(result));
			instance.error_count += 1;
		}
		std::io::reset_color();
	}



	function on_success_case(instance, fx, test_case) private {
		std::io::reset_color();
		if(was_successful(fx, test_case.input)) {
			std::io::set_fg_color(std::io::color::GREEN);
			std::println("ok: "
				+ std::string(test_case.input) 
				+ " was successful");
		}
		else {
			std::io::set_fg_color(std::io::color::BOLD_RED);
			std::println("[ERROR]: "
				+ std::string(test_case.input) 
				+ " failed");
			instance.error_count += 1;
		}
		std::io::reset_color();
	}



	function on_fail_case(instance, fx, test_case) private {
		std::io::reset_color();
		if(!was_successful(fx, test_case.input)) {
			std::io::set_fg_color(std::io::color::GREEN);
			std::println("ok: "
				+ std::string(test_case.input) 
				+ " exception was thrown correctly");
		}
		else {
			std::io::set_fg_color(std::io::color::BOLD_RED);
			std::println("[ERROR]: "
				+ std::string(test_case.input) 
				+ " expected exception");
			instance.error_count += 1;
		}
		std::io::reset_color();
	}



	function init(output) {
		var instance = std::struct();
		instance.error_count = 0;
		instance.output = output;
		return instance;
	}


	enum case_type {
		RESULT;
		SUCCESS;
		FAIL;
	}


	function assert_result(input, expected) {
		var test_case = std::struct();
		test_case.type = case_type::RESULT;
		test_case.input = input;
		test_case.expected = expected;
		return test_case;
	}



	function assert_success(input) {
		var test_case = std::struct();
		test_case.type = case_type::SUCCESS;
		test_case.input = input;
		return test_case;
	}



	function assert_fail(input) {
		var test_case = std::struct();
		test_case.type = case_type::FAIL;
		test_case.input = input;
		return test_case;
	}



	function run_test(instance, name, fx, cases) {
		std::println(instance.output, "Testing: " + std::string(name));
		for (i : 0 -> std::size(cases)) {
			var test_case = cases[i];
			switch(test_case.type) {
				case case_type::RESULT:
					on_result_case(instance, fx, test_case);
				
				case case_type::SUCCESS:
					on_success_case(instance, fx, test_case);

				case case_type::FAIL:
					on_fail_case(instance, fx, test_case);
			}
		}
		std::println("");
	}



	function interprete_results(instance) {
		std::println("=== Result ===");
		if(instance.error_count) {
			std::println("Tests failed");
			std::println(std::string(instance.error_count) + " ERROR(S)");
		}
		else {
			std::println("No errors found. All tests successful :)");
		}
		std::println("");
	}
}



function main() {
	var sphinx = sphinx::init(std::cout());
	var fx = lambda(a,b) {
		if(b == 0) throw;
		return a / b;
	};

	sphinx::run_test(sphinx, "Operator /", fx, [
		sphinx::assert_result([1, 2.0], 0.5),
		sphinx::assert_result([1, -1], -1),
		sphinx::assert_result([1, -0.1], -10),
		sphinx::assert_success([1, 1]),
		sphinx::assert_fail([1, 0]),
	]);
	sphinx::interprete_results(sphinx);
}