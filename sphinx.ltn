namespace sphinx {
	var total_errors = [];
	var last_errors = [];
	var test_count = 0;
	var case_count = 0;
	var test_name;


	function emit_error(error) private {
		std::insert_back(last_errors, error);
	}



	function last_successful() private {
		return std::empty(last_errors);
	}



	function all_successful() private {
		return std::empty(total_errors);
	}



	function inc_test() private {
		test_count = test_count + 1;
	}


	
	function inc_case() private {
		case_count = case_count + 1;
	}



	function print_results() private {
		if(all_successful()) {
			std::io::set_fg_color(std::io::color::GREEN);
		}
		else {
			std::io::set_fg_color(std::io::color::RED);
		}

		std::println("Results");
		std::println("Tests:       " + std::str(test_count));
		std::println("Total cases: " + std::str(case_count));
		std::println("Errors:      " + std::str(std::size(total_errors)));

		if(all_successful()) {
			std::println("All tests successful :)");
		}
		else {
			std::println(std::str(std::size(total_errors)) + " test cases failed!");
		}
		std::io::reset_color();
	}




	function run_tests() {
		var ns = reflect(namespace sphinx::test);
		var counter = 0;
		for(fx : ns.functions) {
			counter = counter + 1;
			var	prev_case_count = case_count;
			test_name = fx.name;
			fx.fx_ptr();
			inc_test();

			var progress_counter = std::right_pad(std::str(counter) + "/" + std::str(ns.functions->size()), 9);
			var case_difference = " " + std::left_pad("+" + std::str(case_count - prev_case_count), 4)  + " cases";
			

			std::print("Test ");
			std::print(progress_counter);
			std::print(case_difference);
			std::print(": ");

			std::io::set_fg_color(last_successful() ? std::io::color::GREEN : std::io::color::RED);

			std::print(test_name);

			std::println("");
			for(err : last_errors) {
				std::print("\t");
				std::println(err);
			}
			std::io::reset_color();
			total_errors = total_errors + last_errors;
			last_errors = [];
		}
		print_results();
	}



	function assert_equal(a, b) private {
		inc_case();
		if(a != b) {
			emit_error("[FAILED] Expected equal values: " + std::str(a) + " != " + std::str(b));
		}
	}


	function assert_equal_strict(a, b) private {
		inc_case();
		if(a != b || std::typeid(a) != std::typeid(b)) {
			emit_error("[FAILED] Expected equal values of equal type: " + std::str(a) + " != " + std::str(b));
		}
	}


	function assert_true(input) private {
		inc_case();
		if(!input) {
			emit_error("[FAILED] Expected true but got false");
		}
	}



	function assert_false(input) private {
		inc_case();
		if(input) {
			emit_error("[FAILED] Expected false but got true");
		}
	}



	function assert_success(fx) private {
		inc_case();
		if(!std::is_successful(fx)) {
			emit_error("[FAILED] Expected success but got exception");
		}
	}



	function assert_except(fx) private {
		inc_case();
		if(std::is_successful(fx)) {
			emit_error("[FAILED] Expected exception but got success");
		}
	}



	function test_name(name) private {
		test_name = name;
	}



	function assert_type(type, expr) private {
		inc_case();
		if(!std::is(type, expr)) {
			emit_error("[FAILED] Mismatching types: Expected " + std::str(type) + " but got value " + std::str(expr));
		}
	}



	function fail() private {
		inc_case();
		emit_error("[FAILED] Call to fail()");
	}



	function pass() private {
		inc_case();
	}
}